/* ðŸš¨ðŸš¨ðŸš¨ THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. ðŸš¨ðŸš¨ðŸš¨ */
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never };
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never;
    };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
};

export class Animal {
  __typename?: 'Animal';
  name: Scalars['String']['output'];
}

export class AnimalsAndPokemonResponse {
  __typename?: 'AnimalsAndPokemonResponse';
  animals: Array<Animal>;
  pokemon: Array<Pokemon>;
}

export class Pokemon {
  __typename?: 'Pokemon';
  name: Scalars['String']['output'];
  url: Scalars['String']['output'];
}

export class Query {
  __typename?: 'Query';
  animals: Array<Animal>;
  animalsAndPokemon?: Maybe<AnimalsAndPokemonResponse>;
  pokemon: Array<Pokemon>;
}
